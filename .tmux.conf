# remap prefix to Control + a
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf

# Start windows at 1, not 0
set -g base-index 1

# quick pane cycling
unbind ^A
bind ^A select-pane -t :.+

# enable mouse
setw -g mouse on

# vim like settings
setw -g mode-keys vi

# No delay for escape key press
set -sg escape-time 0

# vim style pane split
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"

# vim style select and copy
# TODO: this writes errors on ubuntu18
#bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'y' copy-selection

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
# bind-key -T copy-mode-vi C-\ select-pane -l

# take over the ubuntu promt colors
set -g default-terminal "xterm-256color"


###############################################################################
# MY THEME (gruvbox)
#
# tmux does not not evaluate variables inside of set commands (So no concatenation).
# Therefore we need to declare variables and concatenate them in a shell-like manner

# basic definition of colour. Change man colour of the theme by changing this number
# 1:red, 2:green, 3:yellow, 4:blue, 5:magenta, 6:cyan.
TERM_COLOR_MAIN_NUM=2 # green
TERM_COLOR_MAIN_LIGHT_NUM='#(expr '$TERM_COLOR_MAIN_NUM' + 8)' # light version of main colour

TMUX_COLOR_MAIN='colour'$TERM_COLOR_MAIN_NUM
TMUX_COLOR_MAIN_LIGHT='colour'$TERM_COLOR_MAIN_LIGHT_NUM
# TODO swap fg-bg for light themes
TMUX_COLOR_BG='black'
TMUX_COLOR_FG='white'
TMUX_COLOR_SSH='colour5' # magenta
TMUX_COLOR_GRAY_LIGHT='colour7'
TMUX_COLOR_GRAY_DARK='colour8'

# style declarations using colours
STYLE_COLOR='#[fg='$TMUX_COLOR_BG',bg='$TMUX_COLOR_MAIN']'
STYLE_COLOR_LIGHT='#[fg='$TMUX_COLOR_BG',bg='$TMUX_COLOR_MAIN_LIGHT']'
STYLE_COLOR_SSH='#[fg='$TMUX_COLOR_BG',bg='$TMUX_COLOR_SSH']'
STYLE_GRAY_DARK='#[fg='$TMUX_COLOR_BG',bg='$TMUX_COLOR_GRAY_DARK']'
STYLE_GRAY_LIGHT='#[fg='$TMUX_COLOR_BG',bg='$TMUX_COLOR_GRAY_LIGHT']'

# status declarations using styles
STATUS_LEFT=$STYLE_COLOR' [#S] '$STYLE_GRAY_DARK' #(whoami)@#(hostname) #[default] - '
STATUS_LEFT_SSH=$STYLE_COLOR_SSH' [#S] '$STYLE_COLOR_SSH' #(whoami)@#(hostname) #[default] - '
WINDOW_STATUS=$STYLE_GRAY_DARK' #I '$STYLE_GRAY_LIGHT' #W#F '
WINDOW_STATUS_CURRENT=$STYLE_COLOR' #I '$STYLE_COLOR_LIGHT' #W#F '
STATUS_RIGHT=$STYLE_GRAY_LIGHT' %d.%b '$STYLE_COLOR' %H:%M #[default]'

# tmux settings using status variables
set -g status-bg $TMUX_COLOR_BG
set -g status-fg $TMUX_COLOR_FG
set -g status-left-length 35
set -g status-left $STATUS_LEFT

set -g window-status-separator ' '
set -g status-justify left
setw -g window-status-format $WINDOW_STATUS
setw -g window-status-current-format $WINDOW_STATUS_CURRENT
set -g status-right $STATUS_RIGHT

# TODO: set pane border's colour!


# TODO set different colour and status items on a remote ssh session
#But how is it possible to apply different conditional-based configurations?
#Well, thatâ€™s rather easy. We can detect whether the session is remote or local by existence of the SSH_CLIENT environment variable.
#```
if-shell 'test -n "$SSH_CLIENT"' \
   'set -g status-left $STATUS_LEFT_SSH'
#if-shell 'test -n "$SSH_CLIENT"' \
#   'source-file ~/.tmux/tmux.remote.conf'
#```
#And the ~/.tmux/tmux.remote.conf file contains the configuration which will be applied only to the remote session. There we change status line position, and remove some widgets from it (like clock and battery) because they just replicate same widgets from the local session.


# ideas collected from: https://github.com/teaberryy/dotfiles/blob/master/.tmux.conf)
# See also this nice config: https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/


###############################################################################
############# Date/Time values that can be displayed in the status line
###############################################################################


# $(echo $USER) - shows the current username
# %a --> Day of week (Mon)
# %A --> Day of week Expanded (Monday)

# %b --> Month (Jan)
# %d --> Day (31)
# %Y --> Year (2017)

# %D --> Month/Day/Year (12/31/2017)
# %v --> Day-Month-Year (31-Dec-2017)

# %r --> Hour:Min:Sec AM/PM (12:30:27 PM)
# %T --> 24 Hour:Min:Sec (16:30:27)
# %X --> Hour:Min:Sec (12:30:27)
# %R --> 24 Hour:Min (16:30)
# %H --> 24 Hour (16)
# %l --> Hour (12)
# %M --> Mins (30)
# %S --> Seconds (09)
# %p --> AM/PM (AM)

# For a more complete list view: https://linux.die.net/man/3/strftime

############# Further available variables

#D ()
#F ()
#H (hostname)
#I (window index)
#P (current Pane)
#S (session index)
#T (pane title)
#W (currnet task like vim if editing a file in vim or zsh if running zsh)


###############################################################################

#Example how to calculate Variables in tmux conf
#A=5
#B=8
#EVAL='#(expr '$A' + '$B')'

###############################################################################
